worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # JSON log format with upstream details and app headers
    log_format main_json escape=json
      '{'
        '"time":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"method":"$request_method",'
        '"uri":"$request_uri",'
        '"status":$status,'
        '"pool":"$upstream_http_x_app_pool",'
        '"release":"$upstream_http_x_release_id",'
        '"upstream_status":"$upstream_status",'
        '"upstream_addr":"$upstream_addr",'
        '"request_time":$request_time,'
        '"upstream_response_time":"$upstream_response_time",'
        '"bytes_sent":$bytes_sent,'
        '"host":"$host"'
      '}';

    access_log /var/log/nginx/access.json.log main_json;
    error_log  /var/log/nginx/error.log warn;

    # Upstream with blue active, green backup
    upstream backend {
        server app_blue:3000 max_fails=1 fail_timeout=2s;
        server app_green:3000 backup;
    }

    server {
        listen 80;

        location / {
    proxy_pass http://backend;

    proxy_connect_timeout 1s;
    proxy_send_timeout 3s;
    proxy_read_timeout 3s;

    proxy_next_upstream error timeout http_502 http_503 http_504;
    proxy_next_upstream_tries 2;
    proxy_next_upstream_timeout 2s;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_buffering off;
}


        # Optional health/version passthrough for manual checks
        location = /version {
            proxy_pass http://backend/version;
        }
    }
}
